@startuml 事件系统 src.vs.base.common.event
    ' 资源释放接口 disposable：用后待释放的资源；dispose：释放资源
    ' 使用DisposableStore可以追踪leaked disposables或者直接继承Disposable
    interface IDisposable {
        + void dispose()
    }
    IDisposable <|..> DisposableStore
    class DisposableStore {
        {static} boolean DISABLE_DISPOSED_WARNING
        - Set<IDisposable> _toDispose
        - boolean _isDisposed
        ' Dispose of all registered disposables and mark this object as disposed
        + void dispose()
        ' Dispose of all registered disposables but do not mark this object as disposed
        + void clear()
        + T add<T extends IDisposable>(T t)

    }
    IDisposable <|..> Disposable
    DisposableStore <--* Disposable
    abstract class Disposable {
        {static} readonly any None
        - readonly DisposableStore _store
        Disposable()
        + void dispose()
        # T _register<T extends IDisposable>(T t)
    }
    ' 函数签名
    interface Event<T> {
        (listener: (e: T) => any, any thisArgs?, IDisposable[]|DisposableStore disposable?):IDisposable
    }
    ' namespace Event
    interface event.NodeEventEmitter {
        + unknown on(string|symbol event, Function listener)
        + unknown removeListener(string|symbol event, Function listener)
    }
    interface event.DOMEventEmitter {
        + void addEventListener(string|symbol event, Function: listener)
        + void removeEventListener(string|symbol event, Function: listener)
    }
    interface EmitterOptions {
        + Function onFirstListenerAdd?
        + Function onFirstListenerDidAdd?
        + Function onListenerDidAdd?
        + Function onLastListenerRemove?
        + Function leakWarningThreshold?
    }
    class LeakageMonitor {
        - Map<string, number>|undefined _stacks
        - number _warnCountdown
        LeakageMonitor(number customThreshold, string name)
        + void dispose()
        + any check(number listenerCount)
    }
    LeakageMonitor <--* Emitter
    class Emitter<T> {
        - {static} readyonly EmitterOptions _noop
        - readyonly LeakageMonitor _leakageMon
        - boolean disposed
        - Event<T> _event?
        - LinkedList<[Listener<T>, T]> _deliveryQueue?
        # LinkedList<Listener<T>> _listeners?
        Emitter(EmitterOptions options?)
        + Event<T> event()
        + void fire(T event)
        + void dispose()

    }
    ' 应用:谁想使用事件系统，谁就组合一个Emitter对象
    Emitter <--* WindowManager
    class WindowManager {
        + {static} readonly INSTANCE = new WindowManager
        - number _zoomLevel = 0
        - readonly Emitter<number> _onDidChangeZoomLevel = new Emitter<number>
        + readonly Event<number> onDidChangeZoomLevel = this._onDidChangeZoomLevel.event
        - number _zoomFactor = 1
        - boolean _fullscreen = false
        - readonly Emitter<void> _onDidChangeFullscreen = new Emitter<void>
        + number getZoomLevel()
        + number getTimeSinceLastZoomLevelChanged()
        + void setZoomLevel(number zoomLevel, boolean isTrusted)
        + number getZoomFactor()
        + void setZoomFactor(number zoomFactor)
        + number getPixelRatio()
        + readonly Event<void> onDidChangeFullscreen = this._onDidChangeFullscreen.event
        + void setFullscreen(boolean fullscreen)
        + boolean isFullscreen()
    }
@enduml