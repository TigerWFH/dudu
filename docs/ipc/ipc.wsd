@startuml IPC
    interface IDisposable {}
    ' An `IChannel` is an abstraction over a collection of commands
    ' You can `call` several commands on a channel, each taking at
    ' most one single argument. A `call` always returns a promise
    ' with at most one single return value.
    interface type.IChannel{
        + Promise<T> call<T>(string command, any arg?, CancellationToken cancellationToken)
        + Event<T> listen<T>(string event, any arg?)
    }
    ' counterpart：某人的counter part是指与他有相似职位的人；某物的counter part是指与它有相似功能的物
    ' An `IServerChannel` is the counter part to `IChannel`,on the server-side.
    interface type.IServerChannel<TContext=string>{
        + Promise<T> call<T>(TContext ctx, string command, any arg?, CancellationToken cancellationToken?)
        + Event<T> listen<T>(TContext ctx, string event, any arg?)
    }
    interface type.IHandler {
        (response: IRawResponse): void;
    }
    interface type.IMessagePassingProtocol {
        + void send(VSBuffer buffer)
        + Promise<void> drain()?
        + Event<VSBuffer> onMessage
    }
    ' An `IClientRouter` is responsible for routing calls to specific channels, 
    ' in scenarios in which there are multiple possible channels (each from a separate client) to pick from
    interface type.IClientRouter<TContext=string>{
        + Promise<Client<TContext>> routeCall(IConnectionHub<TContext> hub, string command, any arg?, CancellationToken cancellationToken?)
        + Promise<CLient<TContext>> routeEvent(IConnectionHub<TContext> hub, string event, any arg?)
    }
    ' An `IChannelServer` hosts a collection of  You are able to register channels onto it, provided a channel name.
    interface IChannelServer<TContext = string> {
        + void registerChannel(string channelName, IServerChannel<TContext> channel)
    }
    ' An `IChannelClient` has access to a collection of  You are able to get those channels, given their channel name.
    interface IChannelClient {
        + T getChannel<T extends IChannel>(string channelName)
    }
    interface Client<TContext> {
        + readonly TContext ctx
    }
    interface IConnectionHub<TContext> {
        + readonly Connection<TContext>[] _connections
        + readonly Event<Connection<TContext>> onDidAddConnection
        + readonly Event<Connection<TContext>> onDidRemoveConnection
    }
    ' An `IClientRouter` is responsible for routing calls to specific channels
    ' in scenarios in which there are multiple possible channels (each from a separate client) to pick from.
    interface type.IClientRouter<TContext=string> {
        + Promise<Client<TContext>> routeCall(IConnectionHub<TContext> hub, string command, any arg?, CancellationToken cancellationToken)
        + Promise<Client<TContext>> routeEvent(IConnectionHub<TContext> hub, string event, any arg?)
    }
    ' Similar to the `IChannelClient`, you can get channels from this
    ' collection of  The difference being that in the
    ' `IRoutingChannelClient`, there are multiple clients providing
    ' the same channel. You'll need to pass in an `IClientRouter` in
    ' order to pick the right one
    interface IRoutingChannelClient<TContext=string> {
        + T getChannel<T extends IChannel>(string channelName, IClientRouter<TContext> router?)
    }
    interface IReader {
        + VSBuffer read(number bytes)
    }
    interface IWriter {
        + void write(VSBuffer buffer)
    }
    class BufferReader {
        - muber pos
        BufferReader(VSBuffer buffer)
        + VSBuffer read(number bytes)
    }
    class BufferWriter {
        - VSBuffer[] buffers
        + VSBuffer buffer()
        + void write(VSBuffer buffer)
    }
    interface type.PendingRequest {
        request: IRawPromiseRequest | IRawEventListenRequest
        timeoutTimer: any
    }
    class ChannelServer<TContext=string> {
        - Map<string, IServerChannel<TContext>> channels
        - Map<number, IDisposable> activeRequests
        - IDisposable|null protocolListener
        - Map<string, PendingRequest[]> pendingRequests
        ChannelServer(IMessagePassingProtocol protocol, TContext ctx, IIPCLogger|null logger, number timeoutDelay)
        + void registerChannel(string channelName, IServerChannel<TContext> channel)
        - void sendResponse(IRawResponse response)
        - number send(any header, any body)
        - number sendBuffer(VSBuffer message)
        - void onRawMessage(VSBuffer message)
        - void onPromise(IRawPromiseRequest request)
        - void onEventListen(IRawEventListenRequest request)
        - void disposeActiveRequest(IRawRequest request)
        - void collectPendingRequest(IRawPromiseRequest|IRawEventListenRequest request)
        - void flushPendingRequests(string channelName)
        + void dispose()
    }
    interface IIPCLogger {
        + void logIncoming(number msgLength, number requestId, RequestInitiator initiator, string str, any data?)
        + void logOutgoing(number msgLength, number requestId, RequestInitiator initiator, string str, any data?)
    }
    class ChannelClient {
        - State state
        - Set<IDisposable> activeRequests
        - Map<number, IHandler> handlers
        - number lastRequestId
        - IDisposable|null protocolListener
        - IIPCLogger|null logger
        - readonly Emitter<void> _onDidInitialize
        ChannelClient(IMessagePassingProtocol protocol, IIPCLogger|null logger)
        + T getChannel<T extends IChannel>(string channelName)
        - Promise<any> requestPromise(string channelName, string name, any arg?, CancellationToken cancellationToken)
        - Event<any> requestEvent(string channelName, string name, any arg?)
        - void sendRequest(IRawRequest request)
        - number send(any header, any body)
        - number sendBuffer(VSBuffer message)
        - void onBuffer(VSBuffer message)
        - void onResponse(IRawResponse response)
        - Promise<void> whenInitialized()
        + void dispose()
    }
    interface type.ClientConnectionEvent {
        + IMessagePassingProtocol protocol
        + Event<void> onDidClientDisconnect
    }
    interface Connection<TContext> {
        + readonly ChannelServer<TContext> channelServer
        + readonly ChannelClient channelClient
    }
    ' An `IPCServer` is both a channel server and a routing channel client
    ' As the owner of a protocol, you should extend both this
    ' and the `IPCClient` classes to get IPC implementations for your protocol.
    class IPCServer<TContext = string> {
        - Map<string, IServerChannel<IContext>>
        ' _connections会通过get函数返回connections属性
        - Set<Connection<TContext>> _connections
        - Connection<TContext>[] connections
        - readonly Emitter<Connection<TContext>> _onDidAddConnection
        + readonly Event<Connection<TContext>> onDidRemoveConnection
        - readonly Emitter<Connection<TContext>> _onDidRemoveConnection
        + readonly Event<Connection<TContext>> onDidRemoveConnection
        + IPCServer(Event<ClientConnectionEvent> onDidClientConnect)
        + T getChannel<T extends IChannel>(string channelName, IClientRouter<TContext> route)
        + T getChannel<T extends IChannel>(string channelName, function clientFilter)
        + T getChannel<T extends IChannel>(string channelName, IClientRouter<TContext> routeOrClientFilter)
        - any getMulticastEvent(string channelName, any clientFilter)
        + void registerChannel(string channelName, IServerChannel<TContext> channel)
        + void dispose()
    }
    ' An `IPCClient` is both a channel client and a channel server.
    ' As the owner of a protocol, you should extend both this
    ' and the `IPCClient` classes to get IPC implementations
    ' for your protocol.
    class IPCClient<TContext=string> {
        - ChannelClient channelClient
        - ChannelServer<TContext> channelServer
        IPCClient(IMessagePassingProtocol protocol, TContext ctx, IIPCLogger|null ipcLogger)
        + T getChannel<T extends IChannel>(string channelName)
        + void registerChannel(string channelName, IServerChannel<TContext> channel)
        + void dispose()
    }
    class StaticRouter {

    }
    interface IBaseChannelOptions {
        + boolean disableMarshalling?
    }
    interface IChannelReceiverOptions {

    }
    interface IChannelSenderOptions {
        + unknown context?
        + Map<string, unknown> properties
    }
    class IPCLogger {

    }
    ' 应用
    class Server {
        - {static} Event<ClientConnectionEvent> toClientConnectionEvent(NetServer server)
        - NetServer|null server
        Server(NetServer)
        + void dispose()
    }
    class CClient<TContent=string>{
        + {static} Client<TContext> fromSocket<TContext=string>(ISocket socket, TContext id)
        get Event<void> onClose()
        Client(Protocol|PersistentProtocol protocol, TContext id, IIPCLogger ipcLoger)
        + void dispose()
    }
    IReader <|-- BufferReader
    IWriter <|-- BufferWriter
    IChannelServer <|.. ChannelServer
    IDisposable <|.. ChannelServer
    BufferReader <.. ChannelServer
    BufferWriter <.. ChannelServer
    IChannelClient <|.. ChannelClient
    IDisposable <|.. ChannelClient
    Emitter <--* ChannelClient
    BufferReader <.. ChannelClient
    BufferWriter <.. ChannelClient
    Client <|-- Connection
    IChannelServer <|.. IPCServer
    IRoutingChannelClient <|... IPCServer
    IConnectionHub <|... IPCServer
    IDisposable <|.. IPCServer
    Emitter <---* IPCServer
    ChannelServer <--* IPCServer
    ChannelClient <--* IPCServer
    IChannelClient <|... IPCClient
    IChannelServer <|.. IPCClient
    IDisposable <|.. IPCClient
    ChannelClient <--* IPCClient
    ChannelServer <--* IPCClient
    IClientRouter <|.. StaticRouter
    IBaseChannelOptions <|-- IChannelReceiverOptions
    IBaseChannelOptions <|-- IChannelSenderOptions
    IIPCLogger <|.. IPCLogger
    ' ---------------------------main ---------------------
    IPCServer <|-- Server
    IPCClient <|-- CClient
    together {
        class ChannelClient
        class ChannelServer
    }
    together {
        class IPCServer
        class IPCClient
    }
@enduml